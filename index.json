[{"content":"Use-case It\u0026rsquo;s very common for projects to do JSON logging if you are working with third-party tools or open-source projects like Logstash to process your logs. These tools usually need more complex filtering on the structured data, so using JSON is preferred there.\nWe also wanted to integrate with a third-party tool at work and we needed to add the JSON formatting logs in our projects.\nI will not go into the details of why or why not you should decide JSON logging, as each approach will have it\u0026rsquo;s pros and cons. Instead I will explain how you can do it in Python.\nThe final goal would be to go from:\n2022-09-14 23:47:11,506248 - myapp - DEBUG - debug message To:\n{ \u0026#34;threadName\u0026#34;: \u0026#34;MainThread\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;root\u0026#34;, \u0026#34;thread\u0026#34;: 140735202359648, \u0026#34;created\u0026#34;: 1336281068.506248, \u0026#34;process\u0026#34;: 41937, \u0026#34;processName\u0026#34;: \u0026#34;MainProcess\u0026#34;, \u0026#34;relativeCreated\u0026#34;: 9.100914001464844, \u0026#34;module\u0026#34;: \u0026#34;app\u0026#34;, \u0026#34;funcName\u0026#34;: \u0026#34;do_logging\u0026#34;, \u0026#34;levelno\u0026#34;: 20, \u0026#34;pathname\u0026#34;: \u0026#34;app.py\u0026#34;, \u0026#34;lineno\u0026#34;: 20, \u0026#34;asctime\u0026#34;: [\u0026#34;2022-09-14 23:47:11,506248\u0026#34;], \u0026#34;message\u0026#34;: \u0026#34;debug message\u0026#34;, \u0026#34;filename\u0026#34;: \u0026#34;main.py\u0026#34;, \u0026#34;levelname\u0026#34;: \u0026#34;DEBUG\u0026#34;, } Existing projects If you do a quick search, like I did, you will find two (more or less) active projects which do this:\npython-json-logger json-log-formatter And more And it\u0026rsquo;s interesting that if you check the downloads of these project at PePY or some other tool you see many people probably actually use them. As of writing this, I checked that python-json-logger has a daily download rate of ~200K per day!\nWhy I think you probably don\u0026rsquo;t need that The Python logging module provides a Formatter which can be used to do logging in any formatting you want.\nA very simple and minimal example of a JSON formatter can be written as:\nimport json import logging class JSONFormatter(logging.Formatter): def __init__(self) -\u0026gt; None: super().__init__() self._ignore_keys = {\u0026#34;msg\u0026#34;, \u0026#34;args\u0026#34;} def format(self, record: logging.LogRecord) -\u0026gt; str: message = record.__dict__.copy() message[\u0026#34;message\u0026#34;] = record.getMessage() for key in self._ignore_keys: message.pop(key, None) if record.exc_info and record.exc_text is None: record.exc_text = self.formatException(record.exc_info) if record.exc_text: message[\u0026#34;exc_info\u0026#34;] = record.exc_text if record.stack_info: message[\u0026#34;stack_info\u0026#34;] = self.formatStack(record.stack_info) return json.dumps(message) The code is really simple, for each record you will get the dict from the record, and turn in to JSON with json.dumps().\nThere are only some conditions to add stack_info and exc_info if they are available, which should format exception info according to the record. You can easily modify that to fit your needs.\nAnd to use this formatter with the loggers:\nimport logging # import JSONFormatter logger = logging.getLogger(__name__) logger.setLevel(logging.DEBUG) handler = logging.StreamHandler() handler.setFormatter(JSONFormatter()) logger.addHandler(handler) logger.debug(\u0026#34;debug message\u0026#34;) which will output:\n{ \u0026#34;name\u0026#34;: \u0026#34;__main__\u0026#34;, \u0026#34;levelname\u0026#34;: \u0026#34;DEBUG\u0026#34;, \u0026#34;levelno\u0026#34;: 10, \u0026#34;pathname\u0026#34;: \u0026#34;main.py\u0026#34;, \u0026#34;filename\u0026#34;: \u0026#34;main.py\u0026#34;, \u0026#34;module\u0026#34;: \u0026#34;main\u0026#34;, \u0026#34;exc_info\u0026#34;: null, \u0026#34;exc_text\u0026#34;: null, \u0026#34;stack_info\u0026#34;: null, \u0026#34;lineno\u0026#34;: 38, \u0026#34;funcName\u0026#34;: \u0026#34;\u0026lt;module\u0026gt;\u0026#34;, \u0026#34;created\u0026#34;: 1663168021.864416, \u0026#34;msecs\u0026#34;: 864.4158840179443, \u0026#34;relativeCreated\u0026#34;: 1.2068748474121094, \u0026#34;thread\u0026#34;: 8673392128, \u0026#34;threadName\u0026#34;: \u0026#34;MainThread\u0026#34;, \u0026#34;processName\u0026#34;: \u0026#34;MainProcess\u0026#34;, \u0026#34;process\u0026#34;: 14747, \u0026#34;message\u0026#34;: \u0026#34;debug message\u0026#34;, } For list of all LogRecord attributes you can check the Python\u0026rsquo;s documentation.\nThat\u0026rsquo;s why I think for a code so simple, you are probably better off with implementing in your own code, rather than relying on a third-party package.\n","permalink":"https://aminalaee.dev/posts/2022/python-json-logging/","summary":"Use-case It\u0026rsquo;s very common for projects to do JSON logging if you are working with third-party tools or open-source projects like Logstash to process your logs. These tools usually need more complex filtering on the structured data, so using JSON is preferred there.\nWe also wanted to integrate with a third-party tool at work and we needed to add the JSON formatting logs in our projects.\nI will not go into the details of why or why not you should decide JSON logging, as each approach will have it\u0026rsquo;s pros and cons.","title":"Python JSON Logging"}]